@page "/OneTask/{id:int}"
@using HttpClients.ClientInterfaces
@using Domain.Dtos
@using Domain.Models
@inject ITaskProjectService taskProjectService
@inject ISkillService skillService
@inject IUserService userService
@inject IDepartmentService dptService
@inject ITaskSkillService taskSkillService;

<div class="center-container">
    <div class="container">
        <h3 class="page-header">Task Overview</h3>

        @if (isEditMode)
        {
            <!-- Editable Mode -->
            <EditForm Model="taskProject" OnValidSubmit="HandleSave" class="form-container">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="task-name">Name:</label>
                    <InputText id="task-name" class="form-control" @bind-Value="taskProject.Name" />
                </div>

                <div class="form-group">
                    <label for="project-id">Project ID:</label>
                    <InputNumber id="project-id" class="form-control" @bind-Value="taskProject.ProjectId" readonly />
                </div>

                <div class="form-group">
                    <label for="assigned-to">Assigned To:</label>
                    <InputText id="assigned-to" class="form-control" @bind-Value="taskProject.OwnerUsername" readonly/>
                </div>

                <div class="form-group">
                    <label for="estimate">Estimate (hours):</label>
                    <InputNumber id="estimate" class="form-control" @bind-Value="taskProject.Estimate" />
                </div>

                <div class="form-group">
                    <label for="status">Task Status:</label>
                    <InputSelect id="status" class="form-control" @bind-Value="taskProject.TaskStatusEnum">
                        @foreach (var status in Enum.GetValues(typeof(TaskStatusEnum)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </div>

                
                <div class="form-group">
                    <label for="start-date">Start Date:</label>
                    @* <InputDate id="start-date" class="form-control" @bind-Value="taskProject.StartDate" /> *@
                    <input id="start-date" type="date" @bind="taskProject.StartDate" class="form-control"  />
                </div>

                <div class="form-group">
                    <label for="deadline">Deadline:</label>
                    @* <InputDate id="deadline" class="form-control" @bind-Value="taskProject.Deadline" /> *@
                    <input id="deadline" type="date" @bind="taskProject.Deadline" class="form-control"  />
                    
                </div>

                <div class="form-group">
                    <label for="dependent-on">Dependent On:</label>
                    <InputNumber id="dependent-on" class="form-control" @bind-Value="taskProject.DependentOn" />
                </div>

                <div class="form-group">
                    <label for="order-no">Order No:</label>
                    <InputNumber id="order-no" class="form-control" @bind-Value="taskProject.OrderNo" />
                </div>

                <div class="form-group">
                    <label for="notes">Notes:</label>
                    <InputTextArea id="notes" class="form-control" @bind-Value="taskProject.Notes" />
                </div>

                <div class="button-group">
                    <button type="submit" class="acceptbtn">Save</button>
                    <button type="button" class="cancelbtn" @onclick="CancelEdit">Cancel</button>
                </div>
            </EditForm>
        }
        else
        {
            <!-- Read-Only Mode -->
            <div class="task-details">
                <p><strong>Name:</strong> @taskProject?.Name</p>
                <p><strong>Project ID:</strong> @taskProject?.ProjectId</p>
                <p><strong>Assigned To:</strong> @(string.IsNullOrWhiteSpace(taskProject?.OwnerUsername) ? "Unassigned" : taskProject.OwnerUsername)</p>
                <p><strong>Estimate (hours):</strong> @taskProject?.Estimate</p>
                <p><strong>Task Status:</strong> @taskProject?.TaskStatusEnum</p>
                <p><strong>Start Date:</strong>@taskProject?.StartDate.ToString()</p>
                <p><strong>Deadline:</strong> @taskProject?.Deadline.ToString()</p>
                <p><strong>Dependent On:</strong> @taskProject?.DependentOn</p>
                <p><strong>Order No:</strong> @taskProject?.OrderNo</p>
                <p><strong>Notes:</strong> @taskProject?.Notes</p>
            </div>

            <button class="acceptbtn" @onclick="EnableEdit">Edit Task</button>
        }

        <h4 class="section-header">Required Skills</h4>

         @if (taskSkills != null && taskSkills.Any())
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Skill Name</th>
                                <th>Proficiency</th>
                                <th></th> <!-- Column for delete icon -->
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var taskSkill in taskSkills)
                            {
                                <tr>
                                    <td>@taskSkill.SkillName</td>
                                    <td>@taskSkill.Proficiency</td>
                                    <td>
                                       <span @onclick="() => DeleteSkill(taskSkill.Id)" class="delete-icon">‚ùå</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No skills added to this task yet.</p>
                }
        
        @if (showAddSkillForm)
        {
            <EditForm Model="skills" OnValidSubmit="AddSkill" class="form-container">
                <div class="form-group">
                    <label for="category">Skill Category:</label>
                    <select id="category" class="form-control"  @onchange="LoadSkills">
                        <option value="">Choose category</option>
                        @foreach (string category in categories)
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                </div>

                @if (skills != null && skills.Any())
                {
                    <div class="form-group">
                        <label for="skill-name">Skill Name:</label>
                        <select id="skill-name" class="form-control" @bind="selectedSkill">
                            <option value="">Choose skill</option>
                            @foreach (string skill in skills)
                            {
                                <option value="@skill">@skill</option>
                            }
                        </select>
                    </div>
                }

                <div class="form-group">
                    <label for="proficiency">Proficiency:</label>
                    <select id="proficiency" class="form-control" @bind="selectedProficiency">
                        <option value="">Choose proficiency</option>
                        @foreach (Proficiency prof in Enum.GetValues(typeof(Proficiency)))
                        {
                            <option value="@prof">@prof</option>
                        }
                    </select>
                </div>

                <div class="button-group">
                    <button type="submit" class="acceptbtn">Add Skill</button>
                    <button type="button" class="cancelbtn" @onclick="CancelAddSkill">Cancel</button>
                </div>
            </EditForm>
        }
        else
        {
            <button class="acceptbtn" @onclick="ShowAddSkillForm">Add Task Required Skill</button>
        }
        
        @* Assignment of user to task *@
        <h4 class="section-header">Assign Task</h4>
        @if (showAddAssignmentForm)
        {
            <EditForm Model="departments"  class="form-container">
                <div class="form-group">
                    <label for="department">User Department:</label>
                    <select id="department" class="form-control"  @onchange="LoadUsers">
                        <option value="">Choose department</option>
                        @foreach (string department in departments)
                        {
                            <option value="@department">@department</option>
                        }
                    </select>
                </div>
                
    
                @* New user and availability *@

                <!-- Display Users with Availability -->
                @if (usersByDpt != null && usersByDpt.Any()) 
                {

                    <h5>Users Availability in @selectedDpt:</h5>
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <th>UserName</th>
                            <th>Name</th>
                            <th>Estimated Start Date</th>
                            <th>Estimated Deadline</th>
                            <th> </th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (User user in usersByDpt)
                        {
                            <tr>  
                                <td>@user.Username</td>
                                <td>@user.Name</td>
                                <td>@userAvailability[user.Username]</td> 
                                 <td>@userDeadline[user.Username]</td> 
                                  
                                <td>
                                    <button type="submit" class="acceptbtn" @onclick="() => AssignTaskToUser(user.Username)">Assign User</button>
                                    <button type="button" class="cancelbtn" @onclick="CancelAddAssign">Cancel</button>
                                </td>
                            </tr> 
                        }
                        </tbody>
                    </table>
                }
                  <div class="button-group">
                               
                                 
                                </div>
            </EditForm>
        } 
        else
        {
            <button class="acceptbtn" @onclick="ShowAddAssignmentForm">Assign task </button>
        }
    

        @* needed *@
    </div>
</div>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!; //added to remember the logged in claims

    [Parameter]
    public int Id { get; set; }

    private string msg = "";
    private TaskProjectBasicDto? taskProject;

    private string name;
    private int projectId;
    private string ownerUsername;
    private int? estimate;
    private TaskStatusEnum taskStatus;
    private DateOnly? startDate;
    private DateOnly? deadline;
    private int? dependentOn;
    private double? orderNo;
    private string notes;


    private List<TaskSkill> taskSkills; //??????needed new????? todo get task skills

    //add task skills 
    private string selectedSkill;
    private Proficiency selectedProficiency;
    private List<string> categories = new List<string>();
    private string? selectedCategory;
    private List<string>? skills = new List<string>();

    // UI States SKills
    private bool isEditMode = false;
    private bool showAddSkillForm = false;
    //UI States Assignment
    private bool showAddAssignmentForm = false;

    protected override async Task OnInitializedAsync()
    {
        msg = "";

        try
        {
            taskProject = await taskProjectService.GetByIdAsync(@Id);
            categories = await skillService.GetUniqueCategories();
            departments = await dptService.GetUniqueDepartmentsAsync();
         // Load existing task skills by task project id
            taskSkills = (await taskSkillService.GetAsync(null, null, taskProject?.ProjectId)).ToList();
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private void EnableEdit()
    {
        isEditMode = true;
    }

    private void CancelEdit()
    {
        isEditMode = false;
    }

    private async Task HandleSave()
    {
    // Simulate saving the task to the database
        await taskProjectService.UpdateAsync(taskProject);
        isEditMode = false;
    }

    private void ShowAddSkillForm()
    {
        showAddSkillForm = true;
    }

    private async Task AddSkill()
    {
        TaskSkillCreationDto dto = new TaskSkillCreationDto(taskProject!.ProjectId, selectedSkill, selectedProficiency);
        TaskSkill createdSkill = await taskSkillService.CreateAsync(dto);
        taskSkills.Add(createdSkill);
        showAddSkillForm = false;
    }

    private void CancelAddSkill()
    {
        showAddSkillForm = false;
    }


    private async Task LoadSkills(ChangeEventArgs category)
    {
    // Get the selected category
        selectedCategory = category.Value?.ToString();
        try
        {
            if (!string.IsNullOrWhiteSpace(selectedCategory))
            {
                skills = await skillService.GetUniqueSkills(selectedCategory);

            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task DeleteSkill(int taskSkillId)
    {
        try
        {
            await taskSkillService.DeleteAsync(taskSkillId);
            taskSkills = taskSkills.Where(ts => ts.Id != taskSkillId).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    //Assign Task 
    //Availability
    private List<string> departments = new List<string>();
    private string selectedDpt;
    private IEnumerable<User> usersByDpt;
    private string? selectedUser;

    private DateOnly availableStartDate;
    private DateOnly userTaskDeadline;
    //private int hoursForProjectsPerDay;

    //start date
    public async Task<DateOnly> SoonestAvailabilityForUser(string username)
    {
        try
        {
            availableStartDate = await userService.SoonestAvailabilityForUser(username);
   
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        return availableStartDate;

    }

    //deadline
    public async Task<DateOnly> calculateTaskDeadline(string username, int? estimatedTaskHours, int? hoursForProjectsPerDay, DateOnly availableStartDate)
    {
        try
        {
            if (estimatedTaskHours > 0)
            {
                bool holiday = await IsOnHoliday(username, availableStartDate);
                if (!holiday || !IsWeekend(availableStartDate))
                {
                    estimatedTaskHours -= hoursForProjectsPerDay;
                }
                availableStartDate = availableStartDate.AddDays(1);
                return await calculateTaskDeadline(username, estimatedTaskHours, hoursForProjectsPerDay, availableStartDate);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        return availableStartDate;
    }



    public bool IsWeekend(DateOnly date)
    {
        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
        {
           return true;
        }
        return false;
    }

    public async Task<bool> IsOnHoliday(string username,DateOnly date)
    {
        try
        {
            return await userService.IsOnHoliday(username, date);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
            return false;
        }
    }


    private Dictionary<string, DateOnly> userAvailability;
    private Dictionary<string, DateOnly> userDeadline;
 
    private async Task LoadUsers(ChangeEventArgs department)
    {
        selectedDpt = department.Value?.ToString();
        try
        {
            userAvailability = new();
            userDeadline = new();
            if (!string.IsNullOrWhiteSpace(selectedDpt))
            {
                usersByDpt = await userService.GetByDepartmentAsync(selectedDpt);
                foreach (var user in usersByDpt)
                {
                    var userAvailabilityvar = await SoonestAvailabilityForUser(user.Username);
                    var userDeadlinevar =  await calculateTaskDeadline(user.Username, taskProject.Estimate, user.ProjectHoursPerDay, userAvailabilityvar);
                    userAvailability[user.Username] = userAvailabilityvar;
                    userDeadline[user.Username] = userDeadlinevar;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
       
    }
    
   
        

    private void ShowAddAssignmentForm()
    {
        showAddAssignmentForm = true;

    }

    
    //TODO figure out assing task how to update task 
    
    private async Task AssignTaskToUser(string username)
    {
        if (username != null)
        {
            taskProject.OwnerUsername = username;
            taskProject.StartDate = userAvailability[username];
            taskProject.Deadline = userDeadline[username];
            await taskProjectService.UpdateAsync(taskProject);
    //   StateHasChanged(); //to reload

    // Your task assignment logic here
    // Add the skill to the list (simulating database save)
    // taskSkills.Add(new SkillModel { Name = newSkillName, Proficiency = newSkillProficiency });
    //TODO save the user as assigned to task + show change
        }
        showAddAssignmentForm = false;
    }

    private void CancelAddAssign()
    {
        showAddAssignmentForm = false;
    }
    
}