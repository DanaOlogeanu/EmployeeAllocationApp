@page "/OneTask/{id:int}"
@using HttpClients.ClientInterfaces
@using Domain.Dtos
@using Domain.Models
@inject NavigationManager navMgr
@inject ITaskProjectService taskProjectService
@inject ISkillService skillService
@inject IUserService userService
@inject IDepartmentService dptService
@inject ITaskSkillService taskSkillService
@inject IUserSkillService userSkillService
@inject ITaskApprovalService taskApprovalService
@inject ITaskAssignmentLogService taskAssignmentLogService
@inject IProjectService projectService


<div class="center-container">
<div class="container">
    <div class="title">
        <h2>Task Overview</h2>
        </div>
    <div>
        @if (isEditMode)
        {
            <!-- Editable Mode -->
            <EditForm Model="taskProject" OnValidSubmit="HandleSave" class="form-container">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                @* added *@
                <div class="form-container">
                    <div class="form-group">
                        <label for="task-name">Name:</label>
                        <InputText id="task-name" class="form-control" @bind-Value="taskProject.Name"/>
                    </div>

                    <div class="form-group">
                        <label for="project-id">Project ID:</label>
                        <InputNumber id="project-id" class="form-control" @bind-Value="taskProject.ProjectId" readonly/>
                    </div>

                    <div class="form-group">
                        <label for="assigned-to">Assigned To:</label>
                        <InputText id="assigned-to" class="form-control" @bind-Value="taskProject.OwnerUsername" readonly/>
                    </div>

                    <div class="form-group">
                        <label for="estimate">Estimate (hours):</label>
                        <InputNumber id="estimate" class="form-control" @bind-Value="taskProject.Estimate"/>
                    </div>

                    <div class="form-group">
                        <label for="status">Task Status:</label>
                        <InputSelect id="status" class="form-control" @bind-Value="taskProject.TaskStatusEnum">
                            @foreach (var status in Enum.GetValues(typeof(TaskStatusEnum)))
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                    </div>


                    <div class="form-group">
                        <label for="start-date">Start Date:</label>
                        @* <InputDate id="start-date" class="form-control" @bind-Value="taskProject.StartDate" /> *@
                        <input id="start-date" type="date" @bind="taskProject.StartDate" class="form-control"/>
                    </div>

                    <div class="form-group">
                        <label for="deadline">Deadline:</label>
                        @* <InputDate id="deadline" class="form-control" @bind-Value="taskProject.Deadline" /> *@
                        <input id="deadline" type="date" @bind="taskProject.Deadline" class="form-control"/>

                    </div>

                    <div class="form-group">
                        <label for="dependent-on">Dependent On:</label>
                        <InputNumber id="dependent-on" class="form-control" @bind-Value="taskProject.DependentOn"/>
                    </div>

                    <div class="form-group">
                        <label for="order-no">Order No:</label>
                        <InputNumber id="order-no" class="form-control" @bind-Value="taskProject.OrderNo" readonly/>
                    </div>

                    <div class="form-group">
                        <label for="notes">Notes:</label>
                        <InputTextArea id="notes" class="form-control" @bind-Value="taskProject.Notes"/>
                    </div>

                    <div class="button-group">
                        <button type="submit" class="acceptbtn">Save</button>
                        <button type="button" class="cancelbtn" @onclick="CancelEdit">Cancel</button>
                    </div>

                    @* added *@
                </div>
            </EditForm>
        }
        else
        {
            <div class="button-group">
                <button class="acceptbtn" @onclick="EnableEdit">Edit Task</button>
            </div>
            <!-- Read-Only Mode -->
            <div class="task-details">
                <p><strong>Name:</strong> @taskProject?.Name</p>

                <p><a href="/OneProject/@taskProject?.ProjectId" class="project-link"><strong>Project ID:</strong> @taskProject?.ProjectId</a></p>
                <div class="two-column-fields">
                    <p><strong>Assigned To:</strong> @(string.IsNullOrWhiteSpace(taskProject?.OwnerUsername) ? "Unassigned" : taskProject.OwnerUsername)</p>
                    <p><strong>Estimate:</strong> @taskProject?.Estimate Hours</p>
                    <p><strong>Task Status:</strong> @taskProject?.TaskStatusEnum</p>
                    <p><strong>Start Date:</strong>@taskProject?.StartDate.ToString()</p>
                    @* <p><strong>Dependent On:</strong> @taskProject?.DependentOn</p> *@

                    @if (taskForLink != null)
                    {
                        <p><a class="project-link" @onclick="() => NavigateToTask(taskForLink?.Id, taskForLink?.ProjectId)"><strong>Dependent on Task:</strong> @taskForLink?.Id - @taskForLink?.Name</a></p>
                    }
                    else
                    {
                        <p><strong>Dependent on:</strong> No dependencies.</p>
                    }
                    <p><strong>Deadline:</strong> @taskProject?.Deadline.ToString()</p>

                    @* <p><strong>Order No:</strong> @taskProject?.OrderNo</p> *@
                </div>
                <p><strong>Notes:</strong> @taskProject?.Notes</p>
            </div>
        }
    </div>

</div>

 <AuthorizeView Roles="Admin,Project Manager"> 
@* <div class="center-container"> *@
    <div class="container">
        @* add *@
        <div>
            <div class="title">
            <h3>Task Required Skills</h3>
</div>
            @if (taskSkills != null && taskSkills.Any())
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th>Skill Name</th>
                        <th>Proficiency</th>
                        <th></th> <!-- Column for delete icon -->
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var taskSkill in taskSkills)
                    {
                        <tr>
                            <td>@taskSkill.SkillName</td>
                            <td>@taskSkill.Proficiency</td>
                            <td>
                                <span @onclick="() => DeleteSkill(taskSkill.Id)" class="delete-icon">‚ùå</span>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            else
            {
                <p>No skills added to this task yet.</p>
            }

            @if (showAddSkillForm)
            {
                <EditForm Model="skills" OnValidSubmit="AddSkill" class="form-container" Context="editFormContext">

                    <div class="form-container">

                        <div class="form-group">
                            <label for="category">Skill Category:</label>
                            <select id="category" class="form-control" @onchange="LoadSkills">
                                <option>Choose category</option>
                                @foreach (string category in categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </select>
                        </div>


                        @if (skills != null && skills.Any())
                        {
                            <div class="form-group">
                                <label for="skill-name">Skill Name:</label>
                                <select id="skill-name" class="form-control" @bind="selectedSkill">
                                    <option>Choose skill</option>
                                    @foreach (string skill in skills)
                                    {
                                        <option value="@skill">@skill</option>
                                    }
                                </select>
                            </div>


                            <div class="form-group">
                                <label for="proficiency">Proficiency:</label>
                                <select id="proficiency" class="form-control" @bind="selectedProficiency">
                                    <option>Choose proficiency</option>
                                    @foreach (Proficiency prof in Enum.GetValues(typeof(Proficiency)))
                                    {
                                        <option value="@prof">@prof</option>
                                    }
                                </select>
                            </div>
                        }

                        <div class="button-group">
                            <button type="submit" class="acceptbtn">Add Skill</button>
                            <button type="button" class="cancelbtn" @onclick="CancelAddSkill">Cancel</button>
                        </div>

                        @* added   *@
                    </div>


                </EditForm>
            }
            else
            {
                <div class="button-group">
                    <button class="acceptbtn" @onclick="ShowAddSkillForm">Add Skill</button>
                </div>
            }

        </div>
        
</div>
 </AuthorizeView>  

 <AuthorizeView Roles="Admin, Manager"> 
@* <div class="center-container"> *@
    <div class="container">
        @* add *@
        
        <div>
            @* Assignment of user to task *@
            <div class="title">
                <h3>Task Assignment</h3>
            </div>

            @if (showAddAssignmentForm)
            {
                <EditForm Model="departments" class="form-container" Context="editFormContext">
                    @* added *@
                    <div class="form-container-large">
                        
                        <div class="form-group">
                            <label for="department">User Department:</label>
                            <select id="department" class="form-control" @onchange="LoadUsers">
                                <option value="">Choose department</option>
                                @foreach (string department in departments)
                                {
                                    <option value="@department">@department</option>
                                }
                            </select>
                        </div>

                        @* New user and availability *@

                        <!-- Display Users with Availability -->
                        @if (usersByDpt != null && usersByDpt.Any())
                        {
                            <h5>Users Availability in @selectedDpt:</h5>
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Name</th>
                                    <th>Skill Match Score</th>
                                    <th>Estimated Start Date</th>
                                    <th>Estimated Deadline</th>

                                    <th> </th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (User user in usersByDpt)
                                {
                                    <tr>
                                        <td>@user.Username</td>
                                        <td>@user.Name</td>
                                        <td>@userSkillScore[user] %</td>
                                        <td>@userAvailability[user.Username]</td>
                                        <td>@userDeadline[user.Username] </td>

                                        <td>
                                            <button type="submit" class="acceptbtn" @onclick="() => AssignTaskToUser(user.Username)">Assign User</button>
                                           
                                        </td>
                                    </tr>
                                  
                                }
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td> 
                                    <td></td>  
                                    <td></td>
                                    <td>
                                    <button type="button" class="cancelbtn" @onclick="CancelAddAssign">Cancel</button>
                                   </td>
                                </tr>
                                </tbody>
                            </table>
                        }

                        @* added *@
                    </div>

                </EditForm>
            }
            else
            {
                <div class="button-group">
                    <button class="btn btn-primary" @onclick="ShowAddAssignmentForm">Assign task </button>
                </div>
            }
        </div>

        
    @* add   *@
@* </div> *@
</div>
    @* <div class="center-container"> *@
 <div class="container">
     @* add *@
        
     <div>
         <div class="title">
             <h3>Assignment Approval Status</h3>
             </div>
         <div class="button-group">
             <button class="btn btn-primary" style="margin-bottom: 10px;" @onclick="MoveToLogs">Task Assignment Log</button>
         </div>
         @* add *@
         @if (approvals == null || !approvals.Any())
         {
             <p>No approvals available for this task.</p>
         }
         else
         {
             <table class="table table-bordered">
                 <thead>
                 <tr>
                     <th>Task ID</th>
                     <th>Approver</th>
                     <th>Status</th>
                     <th>Date of assignment</th>
                     <th>Comments</th>
                 </tr>
                 </thead>
                 <tbody>
                 @foreach (var approval in approvals)
                 {
                     <tr>
                         <td>@approval.TaskProjectId</td>
                         <td>@approval.OwnerUsername</td>
                         <td>@approval.Status</td>
                         <td>@approval.Date</td>
                         <td>@approval.Comments</td>
                     </tr>
                 }
                 </tbody>
             </table>
         }
     </div>

 </div>
 </AuthorizeView> 
    </div>
 
@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!; //added to remember the logged in claims

    [Parameter]
    public int Id { get; set; }

    private string msg = "";
    private TaskProjectBasicDto? taskProject;
    private string name;
    private int projectId;
    private string ownerUsername;
    private int? estimate;
    private TaskStatusEnum taskStatus;
    private DateOnly? startDate;
    private DateOnly? deadline;
    private int? dependentOn;
    private double? orderNo;
    private string notes;


    private List<TaskSkill> taskSkills; 

    //add task skills 
    private string selectedSkill;
    private Proficiency selectedProficiency;
    private List<string> categories = new List<string>();
    private string? selectedCategory;
    private List<string>? skills = new List<string>();

    // UI States SKills
    private bool isEditMode = false;
    private bool showAddSkillForm = false;
    //UI States Assignment
    private bool showAddAssignmentForm = false;

    
    //to view task approval details
    private List<TaskApprovalBasicDto>? approvals;
   
    //to display link for dependentOn instead of seqNo
    private TaskProjectBasicDto? taskForLink;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";

        try
        {
            taskProject = await taskProjectService.GetByIdAsync(@Id);
            categories = await skillService.GetUniqueCategories();
            departments = await dptService.GetUniqueDepartmentsAsync();
         // Load existing task skills by task project id
            taskSkills = (await taskSkillService.GetAsync(null, null, taskProject?.Id)).ToList();
            var taskProjectId = taskProject.Id;
            approvals = (await taskApprovalService.GetByTaskIdAsync(taskProjectId)).ToList();
            
            int projectId = taskProject.ProjectId;
            int sequenceNo = (int)taskProject.DependentOn;
            taskForLink = await taskProjectService.GetBySeq(projectId, sequenceNo);
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     await taskProjectService.GetByIdAsync(Id);
    // }



    private void EnableEdit()
    {
        isEditMode = true;
    }

    private void CancelEdit()
    {
        isEditMode = false;
    }

    private async Task HandleSave()
    {
    // Simulate saving the task to the database
        await taskProjectService.UpdateAsync(taskProject);
        isEditMode = false;
    }

    private void ShowAddSkillForm()
    {
        showAddSkillForm = true;
    }

    private async Task AddSkill()
    {
        TaskSkillCreationDto dto = new TaskSkillCreationDto(taskProject!.Id, selectedSkill, selectedProficiency);
        TaskSkill createdSkill = await taskSkillService.CreateAsync(dto);
        taskSkills.Add(createdSkill);
        showAddSkillForm = false;
    }

    private void CancelAddSkill()
    {
        showAddSkillForm = false;
    }


    private async Task LoadSkills(ChangeEventArgs category)
    {
    // Get the selected category
        selectedCategory = category.Value?.ToString();
        try
        {
            if (!string.IsNullOrWhiteSpace(selectedCategory))
            {
                skills = await skillService.GetUniqueSkills(selectedCategory);

            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task DeleteSkill(int taskSkillId)
    {
        try
        {
            await taskSkillService.DeleteAsync(taskSkillId);
            taskSkills = taskSkills.Where(ts => ts.Id != taskSkillId).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    //Assign Task 
    //Availability
    private List<string> departments = new List<string>();
    private string selectedDpt;
    private IEnumerable<User> usersByDpt;
    private string? selectedUser;

    private DateOnly availableStartDate;
    private DateOnly userTaskDeadline;
    //private int hoursForProjectsPerDay;

    //start date
    public async Task<DateOnly> SoonestAvailabilityForUser(string username)
    {
        try
        {
            availableStartDate = await userService.SoonestAvailabilityForUser(username);
   
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        return availableStartDate;

    }

    //deadline
    public async Task<DateOnly> calculateTaskDeadline(string username, int? estimatedTaskHours, int? hoursForProjectsPerDay, DateOnly availableStartDate)
    {
        try
        {
            if (estimatedTaskHours > 0)
            {
                bool holiday = await IsOnHoliday(username, availableStartDate);
                if (!holiday || !IsWeekend(availableStartDate))
                {
                    estimatedTaskHours -= hoursForProjectsPerDay;
                }
                availableStartDate = availableStartDate.AddDays(1);
                return await calculateTaskDeadline(username, estimatedTaskHours, hoursForProjectsPerDay, availableStartDate);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        return availableStartDate;
    }


   
    
    public bool IsWeekend(DateOnly date)
    {
        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
        {
           return true;
        }
        return false;
    }

    public async Task<bool> IsOnHoliday(string username,DateOnly date)
    {
        try
        {
            return await userService.IsOnHoliday(username, date);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
            return false;
        }
    }


    private Dictionary<string, DateOnly> userAvailability;
    private Dictionary<string, DateOnly> userDeadline;
 
   
    private void ShowAddAssignmentForm()
    {
        showAddAssignmentForm = true;

    }


    private TaskApproval taskApproval;
    private async Task AssignTaskToUser(string username)
    {
        string currentUser = await GetUsernameAsync();
        if (username != null)
        {
            taskProject.OwnerUsername = username;
            taskProject.StartDate = userAvailability[username];
            taskProject.Deadline = userDeadline[username];
            taskProject.TaskStatusEnum = TaskStatusEnum.Requested;
            await taskProjectService.UpdateAsync(taskProject);
            //update project status to Ongoing once a task is assigned 
            var project = await projectService.GetByIdAsync(taskProject.ProjectId);
            project.ProjectStatus = ProjectStatus.Ongoing;
            if (project != null)
            {
                await projectService.UpdateAsync(project);
            }
            //
        }
        foreach (User user in usersByDpt)
        {
            if (user.Role.Equals("Manager"))
            {
                TaskApprovalCreationDto dto = new(taskProject.Id, user.Username, ApprovalStatus.Requested);  //TODO add assined to aka taskProject.OwnerUsername
              taskApproval = await taskApprovalService.CreateAsync(dto);
                //added
                TaskApprovalBasicDto added = new(taskApproval.Id,taskApproval.TaskProjectId, taskApproval.OwnerUsername, taskApproval.Status, taskApproval.Comments, taskApproval.Date);
                approvals.Add(added);
                //added
            }
        }
        await taskAssignmentLogService.CreateAsync(new TaskAssignmentLogCreationDto(taskProject.Id,currentUser , username));
        showAddAssignmentForm = false;
    }

    
    private void CancelAddAssign()
    {
        showAddAssignmentForm = false;
    }
    
    //SKILLS
    
    private Dictionary<User,int> userSkillScore;
    
    private async Task<int> GetUserScoreForTask(User user, List<TaskSkill> taskSkills)
    {
    // Identify the skill with the highest required proficiency
        var highestReqSkill = taskSkills.OrderByDescending(s => s.Proficiency).First();
        const int MaxProficiency = (int)Proficiency.Expert; // Expert Level
        int totalScore = 0;
        int totalScoreForTask = 0;
        foreach (var reqSkill in taskSkills)
        {
    // Get the user's skill level or 0 if not found
            IEnumerable<UserSkill> userSkills = await userSkillService.GetUserSkills(user.Username);
            var userSkill = userSkills.FirstOrDefault(s => s.SkillName.Equals(reqSkill.SkillName));
            int userSkillLevel = userSkill != null ? (int)userSkill.Proficiency : 0;
            int requiredSkillLevel = (int)reqSkill.Proficiency;
    // Apply extra weight for the most critical skill
            if (reqSkill.SkillName == highestReqSkill.SkillName)
            {
                userSkillLevel *= 2; // Weight multiplier for highest relevance
                requiredSkillLevel *= 2;
            }
            totalScore += userSkillLevel;
            totalScoreForTask += requiredSkillLevel;
        }
        int scoreAsPercentage = (totalScore * 100) / totalScoreForTask; // perfect match 100% , skills score over task score >100%, less <100%
        int scoreWhereZeroIsPerfectMatch = totalScore - totalScoreForTask;
        return scoreAsPercentage;
    }
    
    private async Task LoadUsers(ChangeEventArgs department)
    {
        selectedDpt = department.Value?.ToString();
        try
        {
            userSkillScore = new Dictionary<User, int>();
            userAvailability = new();
            userDeadline = new();
            if (!string.IsNullOrWhiteSpace(selectedDpt))
            {
                usersByDpt = await userService.GetByDepartmentAsync(selectedDpt);
                foreach (var user in usersByDpt)
                {
                    var userAvailabilityvar = await SoonestAvailabilityForUser(user.Username);
                    var userDeadlinevar = await calculateTaskDeadline(user.Username, taskProject.Estimate, user.ProjectHoursPerDay, userAvailabilityvar);
                    var userScore = await GetUserScoreForTask(user, taskSkills);
                    userAvailability[user.Username] = userAvailabilityvar;
                    userDeadline[user.Username] = userDeadlinevar;
                    userSkillScore[user] = userScore;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    // // Fetch the logged-in username *@
    private async Task<string> GetUsernameAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        return user.Identity?.Name ?? throw new Exception("User not logged in.");
    }

    private async Task MoveToLogs()
    {
        navMgr.NavigateTo("/AssignmentLogs/taskProject/" + taskProject.Id);

    }
    
 //task link for dependent on
    private async Task NavigateToTask(int? taskId,int? projectId)
    {
        if (taskId != null)
        {
            navMgr.NavigateTo($"/OneProject/{projectId}");
            navMgr.NavigateTo($"/OneTask/{taskId}");
        }
    }
}  
    
