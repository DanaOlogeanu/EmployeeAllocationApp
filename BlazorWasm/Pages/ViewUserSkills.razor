@page "/viewUserSkills"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.Dtos
@inject IUserSkillService UserSkillService
@inject NavigationManager navMgr


@* @attribute [Authorize]   *@
@* need to be logged in for access *@


<h3>Skills</h3>

<div class="toolbar">
    <button @onclick="MoveToSkill" class="acceptbtn">ADD NEW SKILL</button>
    <div class="toolbar-buttons" style="float: right;">
        <button @onclick="UpdateSkills" class="toolbarbtn" disabled="@(!isAnyRowSelected)">Update</button>
        <button @onclick="ShowDeleteConfirmation" class="toolbarbtn" disabled="@(!isAnyRowSelected)">Delete</button>
        <button @onclick="SaveChanges" class="toolbarbtn" disabled="@(!isAnyRowSelected)">Save Changes</button>
        <button @onclick="CancelChanges" class="toolbarbtn" disabled="@(!isAnyRowSelected)">Cancel</button>
    </div>
</div>

@if (userSkills == null)
{
}
else if (!userSkills.Any())
{
    <p>No skills to display</p>
}
else
{
    @foreach (var category in userSkills.GroupBy(skill => skill.Skill.Category))
    {
        <h4>@category.Key (@category.Count())</h4>
        <table class="table">
            <thead>
            <tr>
                <th>Skill Name</th>
                <th>Proficiency</th>
                <th>Notes</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in category)
            {
                <tr class="@GetRowClass(item)" @onclick="() => ToggleSelection(item)">
                    <td>@item.Skill.Name</td>
                    <td>
                        @if (isEditing && selectedSkills.Contains(item))
                        {
                             <select @bind="item.Proficiency" @onclick:stopPropagation="true">
                                @foreach (Proficiency prof in Enum.GetValues(typeof(Proficiency)))
                                {
                                    <option value="@prof">@prof</option>
                                }
                            </select>
                        }
                        else
                        {
                            @item.Proficiency
                        }
                    </td>
                    <td>
                        @if (isEditing && selectedSkills.Contains(item))
                        {
                            <input type="text" @bind="item.Notes" @onclick:stopPropagation="true" />
                        }
                        else
                        {
                            @item.Notes
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}



@if (showConfirmationDialog)
{
    <ConfirmationDialog Title="Delete Skills" Message="Are you sure you want to delete the selected skills?" OnClose="OnDeleteConfirmation" />
}

@if (showSuccessMessage)
{
    <SuccessMessage Message="@successMessage" OnClose="CloseSuccessMessage" />
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;   //added to remember the logged in claims
   
    private IEnumerable<UserSkill>? userSkills;   
    private string msg = "";
    private string? userName;
    //private string? skillName;
    //private int? proficiency;
    private bool isEditing = false;
    private bool isAnyRowSelected => selectedSkills.Any();
    private List<UserSkill> selectedSkills = new();
    private bool showConfirmationDialog = false;
    private bool showSuccessMessage = false;
    private string successMessage = "";

    
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
       
        try
        {
            string? username = await GetUsernameAsync();
            userSkills= await UserSkillService.GetAsync(username,null,null);
     //       userSkills= await UserSkillService.GetUserSkills(username);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
    }
    
    
    private async Task<string?> GetUsernameAsync() //using the claims set in blazor/webapi/authController to get id ??????????????/add companyID
    {
        
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        
        //
        foreach (var claim in user.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
        }

    // Safely attempt to find the claim
        Claim? usernameClaim = user.Claims.FirstOrDefault(claim => claim.Type.Equals(ClaimTypes.Name) || 
                                                                   claim.Type.Equals("name") || 
                                                                   claim.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"));

        if (usernameClaim == null)
        {
    // Handle the case where the claim doesn't exist
            msg = "No username claim found.";
            return null;
        }
        //IEnumerable<Claim> claims = user.Claims;
        //Claim usernameClaim = claims.First(claim => claim.Type.Equals("Name"));
        string name = usernameClaim.Value; //if int-> int.Parse(idClaim.Value);
        return name;
    }
    
    private void ToggleSelection(UserSkill skill)
    {
        if (selectedSkills.Contains(skill))
        {
            selectedSkills.Remove(skill);
        }
        else
        {
            selectedSkills.Add(skill);
        }
    }

    private string GetRowClass(UserSkill skill)
    {
        return selectedSkills.Contains(skill) ? "selected-row" : "";
    }

    private void MoveToSkill()
    {
        navMgr.NavigateTo("/CreateUserSkill");
    }

    private void UpdateSkills()
    {
        isEditing = true;
    }

    private void ShowDeleteConfirmation()
    {
        showConfirmationDialog = true;
    }

    private async Task OnDeleteConfirmation(bool confirmed)
    {
        showConfirmationDialog = false;
        if (confirmed)
        {
            foreach (var skill in selectedSkills)
            {
                await UserSkillService.DeleteAsync(skill.UserSkillId);
            }
            userSkills = userSkills.Where(skill => !selectedSkills.Contains(skill)).ToList();
            selectedSkills.Clear();
            msg = "Skills deleted successfully!";
            await Task.Delay(1000); // Display message for 1 second
            msg = "";
        }
    }
    
    private void CloseSuccessMessage()
    {
        showSuccessMessage = false;
    }

    private async Task SaveChanges()
    {
        foreach (var skill in selectedSkills)
        {
            await UserSkillService.UpdateAsync(new UserSkillBasicDto(skill.UserSkillId, skill.OwnerUsername, skill.Skill.Name, skill.Proficiency, skill.Notes));
        }
        isEditing = false;
        selectedSkills.Clear();
        successMessage = "Changes saved successfully!";
        showSuccessMessage = true;
    }

    private void CancelChanges()
    {
        isEditing = false;
        selectedSkills.Clear();
    }
}







@* @page "/viewUserSkills" *@
@* @using Domain.Models *@
@* @using HttpClients.ClientInterfaces *@
@* @using System.Security.Claims *@
@* @inject IUserSkillService UserSkillService *@
@* @inject NavigationManager navMgr *@
@* @attribute [Authorize] *@
@* $1$ need to be logged in for access #1# *@
@* *@
@* <h3 class="page-header">Skills</h3> *@
@* *@
@* @if (userSkills == null) *@
@* { *@
@* } *@
@* else if (!userSkills.Any()) *@
@* { *@
@*     <p>No skills to display</p> *@
@* } *@
@* else *@
@* { *@
@*     <div class="table-container"> *@
@*         <table class="styled-table"> *@
@*             <thead> *@
@*                 <tr> *@
@*                     <th>Skill Name</th> *@
@*                     <th>Proficiency</th> *@
@*                     <th>Notes</th> *@
@*                 </tr> *@
@*             </thead> *@
@*             <tbody> *@
@*                 @foreach (var item in userSkills) *@
@*                 { *@
@*                     <tr> *@
@*                         <td><a href="/OneUserSkill/@item.UserSkillId" class="skill-link">@item.Skill.Name</a></td> *@
@*                         <td>@item.Proficiency</td> *@
@*                         <td>@item.Notes</td> *@
@*                     </tr> *@
@*                 } *@
@*             </tbody> *@
@*         </table> *@
@*     </div> *@
@* } *@
@* *@
@* @if (!string.IsNullOrEmpty(msg)) *@
@* { *@
@*     <label style="color: red">@msg</label> *@
@* } *@
@* *@
@* <button @onclick="MoveToSkill" class="acceptbtn">ADD NEW SKILL</button> *@
@* *@
@* *@
@* *@
@* *@
@* *@
@* @code { *@
@*     [CascadingParameter] *@
@*     public Task<AuthenticationState> AuthState { get; set; } = null!;   //added to remember the logged in claims *@
@*     *@
@*     private IEnumerable<UserSkill>? userSkills;    *@
@*     private string msg = ""; *@
@*     private string? userName; *@
@*     private string? skillName; *@
@*     private int? proficiency; *@
@*      *@
@*      *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         msg = ""; *@
@*         *@
@*         try *@
@*         { *@
@*             string? username = await GetUsernameAsync(); *@
@*           userSkills= await UserSkillService.GetAsync(username,null,null); *@
@*      //       userSkills= await UserSkillService.GetUserSkills(username); *@
@*         } *@
@*         catch (Exception e) *@
@*         { *@
@*             Console.WriteLine(e); *@
@*             msg = e.Message; *@
@*         } *@
@*          *@
@*     } *@
@*      *@
@*      *@
@*      *@
@*     private async Task<string?> GetUsernameAsync() //using the claims set in blazor/webapi/authController to get id ??????????????/add companyID *@
@*     { *@
@*          *@
@*         AuthenticationState authState = await AuthState; *@
@*         ClaimsPrincipal user = authState.User; *@
@*          *@
@*         // *@
@*         foreach (var claim in user.Claims) *@
@*         { *@
@*             Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}"); *@
@*         } *@
@* *@
@*     // Safely attempt to find the claim *@
@*         Claim? usernameClaim = user.Claims.FirstOrDefault(claim => claim.Type.Equals(ClaimTypes.Name) ||  *@
@*                                                                    claim.Type.Equals("name") ||  *@
@*                                                                    claim.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")); *@
@* *@
@*         if (usernameClaim == null) *@
@*         { *@
@*     // Handle the case where the claim doesn't exist *@
@*             msg = "No username claim found."; *@
@*             return null; *@
@*         } *@
@*         //IEnumerable<Claim> claims = user.Claims; *@
@*         //Claim usernameClaim = claims.First(claim => claim.Type.Equals("Name")); *@
@*         string name = usernameClaim.Value; //if int-> int.Parse(idClaim.Value); *@
@*         return name; *@
@*     } *@
@* *@
@*     private async Task MoveToSkill() *@
@*     { *@
@*         navMgr.NavigateTo("/CreateUserSkill"); *@
@*          *@
@*     } *@
@* } *@