@page "/viewUserSkills"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IUserSkillService UserSkillService
@inject NavigationManager navMgr
@* @attribute [Authorize]   *@
@* need to be logged in for access *@


<h3>Skills</h3>
@if (userSkills == null)
{
}
else if (!userSkills.Any())
{
    <p>No skills to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Skill Name</th>
            <th>Proficiency</th>
            <th>Notes</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in userSkills)
        {
            <tr>
                <td> <a href="/OneUserSkill/@item.UserSkillId">@item.Skill.Name</a> </td>  
                <td>@item.Proficiency</td>
                <td>@item.Notes</td>
            </tr>
        }
        </tbody>
    </table>
    

}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}
    <button @onclick="MoveToSKill" class="acceptbtn">ADD NEW SKILL</button>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;   //added to remember the logged in claims
   
    private IEnumerable<UserSkill>? userSkills;   
    private string msg = "";
    private string? userName;
    private string? skillName;
    private int? proficiency;
    
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
       
        try
        {
            string? username = await GetUsernameAsync();
          userSkills= await UserSkillService.GetAsync(username,null,null);
     //       userSkills= await UserSkillService.GetUserSkills(username);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
    }
    
    
    
    private async Task<string?> GetUsernameAsync() //using the claims set in blazor/webapi/authController to get id ??????????????/add companyID
    {
        
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        
        //
        foreach (var claim in user.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
        }

    // Safely attempt to find the claim
        Claim? usernameClaim = user.Claims.FirstOrDefault(claim => claim.Type.Equals(ClaimTypes.Name) || 
                                                                   claim.Type.Equals("name") || 
                                                                   claim.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"));

        if (usernameClaim == null)
        {
    // Handle the case where the claim doesn't exist
            msg = "No username claim found.";
            return null;
        }
        //IEnumerable<Claim> claims = user.Claims;
        //Claim usernameClaim = claims.First(claim => claim.Type.Equals("Name"));
        string name = usernameClaim.Value; //if int-> int.Parse(idClaim.Value);
        return name;
    }

    private async Task MoveToSKill()
    {
        navMgr.NavigateTo("/CreateUserSkill");
        
    }
}