@page "/viewUserSkills/{Username?}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.Dtos
@inject IUserSkillService UserSkillService
@inject NavigationManager navMgr
<div class="title">
<h2 class="main-header">@headerText</h2>
</div>
<div class="card">
    <div class="toolbar">
        <button @onclick="MoveToSkill" class="btn-primary">ADD NEW SKILL</button>
        <div class="toolbar-button">
            @if(isEditing)
            {
            <button @onclick="SaveChanges" class="save" disabled="@(!isAnyRowSelected)">Save Changes</button>
             }
            else
            {
            <button @onclick="UpdateSkills" class="btn-primary" disabled="@(!isAnyRowSelected)">Edit</button>
            }
            <button @onclick="CancelChanges" class="cancel" disabled="@(!isAnyRowSelected)">Cancel</button>
            <button @onclick="ShowDeleteConfirmation" class="delete" disabled="@(!isAnyRowSelected)">Delete</button>
        </div>
       
    </div>

    @if (userSkills == null)
    {
        <p>Loading skills...</p>
    }
    else if (!userSkills.Any())
    {
        <p>No skills to display</p>
    }
    else
    {
        @foreach (var category in userSkills.GroupBy(skill => skill.Skill.Category))
        {
            <div class="category-section">
                <h4 class="category-title" @onclick="() => ToggleCategory(category.Key)">
                    @category.Key (@category.Count())
                    <span class="dropdown-icon">@((expandedCategories.Contains(category.Key)) ? "▲" : "▼")</span>
                </h4>
                @if (expandedCategories.Contains(category.Key))
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Skill Name</th>
                                <th>Proficiency</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in category)
                            {
                                <tr class="@GetRowClass(item)" @onclick="() => ToggleSelection(item)">
                                    <td>@item.Skill.Name</td>
                                    <td>
                                        @if (isEditing && selectedSkills.Contains(item))
                                        {
                                            <select @bind="item.Proficiency" @onclick:stopPropagation="true">
                                                @foreach (Proficiency prof in Enum.GetValues(typeof(Proficiency)))
                                                {
                                                    <option value="@prof">@prof</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            @item.Proficiency
                                        }
                                    </td>
                                    <td>
                                        @if (isEditing && selectedSkills.Contains(item))
                                        {
                                            <input type="text" @bind="item.Notes" @onclick:stopPropagation="true" />
                                        }
                                        else
                                        {
                                            @item.Notes
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        }
    }

    @if (showConfirmationDialog)
    {
        <ConfirmationDialog Title="Delete Skills" Message="Are you sure you want to delete the selected skills?" OnClose="OnDeleteConfirmation" />
    }

    @if (showSuccessMessage)
    {
        <SuccessMessage Message="@successMessage" OnClose="CloseSuccessMessage" />
    }
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;   //added to remember the logged in claims
   
    [Parameter]
    public string? Username { get; set; }
    private string headerText = "";
    private IEnumerable<UserSkill>? userSkills;   
    private string msg = "";
    private bool isEditing = false;
    private bool isAnyRowSelected => selectedSkills.Any();
    private List<UserSkill> selectedSkills = new();
    private bool showConfirmationDialog = false;
    private bool showSuccessMessage = false;
    private string successMessage = "";
    private HashSet<string> expandedCategories = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSkills();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadSkills();
    }
    
    private async Task LoadSkills()
    {
        msg = "";
        isLoading = true;

        try
        {
            if (!string.IsNullOrEmpty(Username))
            {
                headerText = $"{Username}'s Skills";
                userSkills = await UserSkillService.GetUserSkills(Username);
            }
            else
            {
                string? username = await GetLoggedInUsernameAsync();
                headerText = "My Skills";
                userSkills = await UserSkillService.GetUserSkills(username);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<string?> GetLoggedInUsernameAsync() //using the claims set in blazor/webapi/authController to get id ??????????????/add companyID
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        foreach (var claim in user.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
        }
		 
		 // Safely attempt to find the claim
        Claim? usernameClaim = user.Claims.FirstOrDefault(claim => claim.Type.Equals(ClaimTypes.Name) || 
                                                                   claim.Type.Equals("name") || 
                                                                   claim.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"));

        if (usernameClaim == null)
        {
		 // Handle the case where the claim doesn't exist
            msg = "No username claim found.";
            return null;
        }

        return usernameClaim.Value;
    }
    
    private void ToggleCategory(string category)
    {
        if (expandedCategories.Contains(category))
        {
            expandedCategories.Remove(category);
        }
        else
        {
            expandedCategories.Add(category);
        }
    }
    
    private void ToggleSelection(UserSkill skill)
    {
        if (selectedSkills.Contains(skill))
        {
            selectedSkills.Remove(skill);
        }
        else
        {
            selectedSkills.Add(skill);
        }
    }

    private string GetRowClass(UserSkill skill)
    {
        return selectedSkills.Contains(skill) ? "selected-row" : "";
    }

    private void MoveToSkill()
    {
        navMgr.NavigateTo("/CreateUserSkill");
    }

    private void UpdateSkills()
    {
        isEditing = true;
    }

    private void ShowDeleteConfirmation()
    {
        showConfirmationDialog = true;
    }

    private async Task OnDeleteConfirmation(bool confirmed)
    {
        showConfirmationDialog = false;
        if (confirmed)
        {
            foreach (var skill in selectedSkills)
            {
                await UserSkillService.DeleteAsync(skill.UserSkillId);
            }
            userSkills = userSkills.Where(skill => !selectedSkills.Contains(skill)).ToList();
            selectedSkills.Clear();
            msg = "Skills deleted successfully!";
            await Task.Delay(1000); // Display message for 1 second
            msg = "";
        }
    }
    
    private void CloseSuccessMessage()
    {
        showSuccessMessage = false;
    }

    private async Task SaveChanges()
    {
        foreach (var skill in selectedSkills)
        {
            await UserSkillService.UpdateAsync(new UserSkillBasicDto(skill.UserSkillId, skill.OwnerUsername, skill.Skill.Name, skill.Proficiency, skill.Notes));
        }
        isEditing = false;
        selectedSkills.Clear();
        successMessage = "Changes saved successfully!";
        showSuccessMessage = true;
    }

    private void CancelChanges()
    {
        isEditing = false;
        selectedSkills.Clear();
    }
}
