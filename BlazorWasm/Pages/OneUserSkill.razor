@page "/OneUserSkill/{id:int}"
@inject IUserSkillService UserSkillService
@using HttpClients.ClientInterfaces
@using Domain.Dtos
@using Domain.Models

<div class="table-container">
    <!-- Page Header inside the container for consistent styling -->
    <div class="title">
        <h2>Skill</h2>
        </div>

    @if (userSkill == null)
    {
        <p>No skill to display</p>
    }
    else
    {
        <table class="table">
            <tr>
                <td class="skillview">Skill: @userSkill.SkillName</td>
            </tr>
            <tr>
                <td class="skillview">
                    Proficiency: 
                    <select @bind="userSkill.Proficiency">
                        @foreach (Proficiency prof in Enum.GetValues(typeof(Proficiency)))
                        {
                            <option value="@prof">@prof</option>
                        }
                    </select>
                </td>
            </tr>
            <tr>
                <td class="skillview">
                    Notes: 
                    <input type="text" @bind="userSkill.Notes" />
                </td>
            </tr>
        </table>

        <div class="button-row">
            <button @onclick="SaveChanges" class="acceptbtn">Save</button>
        </div>

        <!-- Display success/error messages if available -->
        @if (!string.IsNullOrEmpty(msg))
        {
            <p class="message">@msg</p>
        }
    }
</div>

@* <div class="button-row"> *@
    @*         <button @onclick="@(() => RemoveProduct(product.Id))"  class="deletebtn">Delete product</button>   <!--how to add disabled button for password as well???? --> *@
    @*     </div> *@
    @* } *@
    @* @if (!string.IsNullOrEmpty(msg)) *@
    @* { *@
    @*     <label style="color: red">@msg</label> *@
        

@code {
    [Parameter]
    public int Id { get; set; }
    
    private string msg = "";
    private UserSkillBasicDto? userSkill;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
    
        try
        {
            userSkill = await UserSkillService.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task SaveChanges()
    {
        try
        {
            await UserSkillService.UpdateAsync(userSkill);
            msg = "Changes saved successfully!";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}