@using HttpClients.ClientInterfaces
@inject ITaskApprovalService taskApprovalService
@inject AuthenticationStateProvider AuthenticationStateProvider


        <AuthorizeView>
            <Authorized>
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        
        <a class="navbar-brand" href="">Employee Allocation</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

                            

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        
        @* <AuthorizeView> *@
        @*     <Authorized> *@
                 @if (UserIsInRole("Admin"))
                 {
                     <div class="nav-category px-3">Admin</div>
                     <ul class="nav-sublist">

                         <li class="nav-item px-3">
                             <NavLink class="nav-link" href="createUser">
                                 <span class="oi oi-list-rich" aria-hidden="true"></span> Create user
                             </NavLink>
                         </li>
                         <li class="nav-item px-3">
                             <NavLink class="nav-link" href="createProjectTag">
                                 <span class="oi oi-list-rich" aria-hidden="true"></span> Create project tag
                             </NavLink>
                         </li>
                         <li class="nav-item px-3">
                             <NavLink class="nav-link" href="createDepartment">
                                 <span class="oi oi-list-rich" aria-hidden="true"></span> Create department
                             </NavLink>
                         </li>
                         <li class="nav-item px-3">
                             <NavLink class="nav-link" href="createSkill">
                                 <span class="oi oi-list-rich" aria-hidden="true"></span> Create skill
                             </NavLink>
                         </li>
                     </ul>
                 }
        @*     </Authorized> *@
        @* </AuthorizeView> *@

        <!-- My Profile Category -->
        @* <AuthorizeView> *@
        @*     <Authorized> *@
                <div class="nav-category px-3">My Profile</div>
                <ul class="nav-sublist">

                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="viewUserSkills">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Skills
                        </NavLink>
                    </li>
                    @if (UserIsInRole("Employee"))
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="viewUserTasks">
                                <span class="oi oi-list-rich" aria-hidden="true"></span> Tasks
                            </NavLink>
                        </li>
                    }
                    @if (UserIsInRole("Admin") || UserIsInRole("Project Manager"))
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="viewProjects">
                                <span class="oi oi-list-rich" aria-hidden="true"></span> Projects
                            </NavLink>
                        </li>
                    }

                </ul>
        @*     </Authorized> *@
        @* </AuthorizeView> *@

        @if (UserIsInRole("Admin") || UserIsInRole("Manager"))
        {
            {
                @* <AuthorizeView> *@
                @*     <Authorized> *@
                        <!-- Team Category -->
                        <div class="nav-category px-3">Team</div>
                        <ul class="nav-sublist">

                            <li class="nav-item px-3">
                                <NavLink class="nav-link" href="viewDepartmentUsers">
                                    <span class="oi oi-list-rich" aria-hidden="true"></span> Team Tasks
                                </NavLink>
                            </li>
                            @if (isUserManager)
                            {
                                <li class="nav-item px-3">
                                    <NavLink class="@($"nav-link {notificationClass}")" href="viewApprovals">
                                        <span class="oi oi-list-rich" aria-hidden="true"></span>
                                        Task Approvals @(PendingApprovals > 0 ? $" ({PendingApprovals})" : "")
                                    </NavLink>
                                </li>
                            }
                            <li class="nav-item px-3">
                                <NavLink class="nav-link" href="skillsMatrix">
                                    <span class="oi oi-list-rich" aria-hidden="true"></span> Skills Matrix
                                </NavLink>
                            </li>

                        </ul>
                //     </Authorized>
                // </AuthorizeView>
            }
        }
        <!-- Search Category -->
        @* <AuthorizeView> *@
        @*     <Authorized> *@
                <div class="nav-category px-3">Search</div>
                <ul class="nav-sublist">
                    @if (UserIsInRole("Admin") || UserIsInRole("Project Manager") || UserIsInRole("Manager"))
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="usersOverview">
                                <span class="oi oi-list-rich" aria-hidden="true"></span> Users by Skills
                            </NavLink>
                        </li>
                    }
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="projectsOverview">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Search Projects
                        </NavLink>
                    </li>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="tasksOverview">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Search Tasks
                        </NavLink>
                    </li>

                </ul>
        @*     </Authorized> *@
        @* </AuthorizeView> *@
    </nav>
</div>
  </Authorized>
        </AuthorizeView>
@code {
          [CascadingParameter]
          public Task<AuthenticationState> AuthState { get; set; } = null!;
      
          private bool collapseNavMenu = true;
          private bool isUserManager = false; // Variable to check if user is a Manager
          private int PendingApprovals = 0;
          private string notificationClass = string.Empty;
      
          private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
      
          private void ToggleNavMenu()
          {
              collapseNavMenu = !collapseNavMenu;
          }
      
          
          
          // We can call RefreshPendingApprovals from OnAfterRenderAsync
          // to ensure the method is called after the component has been rendered
          protected override async Task OnAfterRenderAsync(bool firstRender)
          {
              if (!firstRender)
              {
                  try
                  {
                      var authState = await AuthState;
                      var user = authState.User;

          // Ensure the user is authenticated and has the "Manager" role
                      if (user.Identity?.IsAuthenticated == true && user.IsInRole("Manager"))
                      {
                          isUserManager = true; // The user is a manager
                          await RefreshPendingApprovals();
                          StateHasChanged(); // Trigger re-render 
                      }
                      else
                      {
                          isUserManager = false;
                      }
                      
                  }
                  catch (Exception ex)
                  {
          // Handle any errors that might occur (e.g., network issues, null references)
                      Console.Error.WriteLine($"Error: {ex.Message}");

          // Set the isUserManager flag to false in case of an error
                      isUserManager = false;
                  }
                
              }
          }
      
          
          
          // This method fetches the pending approval count
          private async Task RefreshPendingApprovals()
          {
              try
              {
                  var authState = await AuthState;
                  var user = authState.User;
      
                  if (!user.Identity?.IsAuthenticated ?? true)
                  {
                      Console.Error.WriteLine("User not authenticated.");
                      return;
                  }
      
                  string username = user.Identity.Name ?? throw new Exception("User has no name.");
                  PendingApprovals = await taskApprovalService.GetPendingApprovalAsync(username);
      
                  notificationClass = PendingApprovals > 0 ? "has-notification" : string.Empty;
              }
              catch (Exception e)
              {
                  Console.Error.WriteLine($"Error fetching pending approvals: {e.Message}");
                  PendingApprovals = 0;
                  notificationClass = string.Empty;
              }
          }
    
    
    private bool UserIsInRole(string role)
    {
        var authState = AuthState.Result;
        return authState.User.IsInRole(role);
    }
      }

